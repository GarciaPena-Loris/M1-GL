
package m1.archi.hotel;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "HotelServiceIdentification", targetNamespace = "http://service.archi.m1/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface HotelServiceIdentification {


    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIdentifiantHotels", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.GetIdentifiantHotels")
    @ResponseWrapper(localName = "getIdentifiantHotelsResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.GetIdentifiantHotelsResponse")
    @Action(input = "http://service.archi.m1/HotelServiceIdentification/getIdentifiantHotelsRequest", output = "http://service.archi.m1/HotelServiceIdentification/getIdentifiantHotelsResponse")
    public List<String> getIdentifiantHotels();

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws HotelNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "afficherHotels", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.AfficherHotels")
    @ResponseWrapper(localName = "afficherHotelsResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.AfficherHotelsResponse")
    @Action(input = "http://service.archi.m1/HotelServiceIdentification/afficherHotelsRequest", output = "http://service.archi.m1/HotelServiceIdentification/afficherHotelsResponse", fault = {
        @FaultAction(className = HotelNotFoundException_Exception.class, value = "http://service.archi.m1/HotelServiceIdentification/afficherHotels/Fault/HotelNotFoundException")
    })
    public String afficherHotels(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns boolean
     * @throws HotelAlreadyExistsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addRandomHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.AddRandomHotel")
    @ResponseWrapper(localName = "addRandomHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.AddRandomHotelResponse")
    @Action(input = "http://service.archi.m1/HotelServiceIdentification/addRandomHotelRequest", output = "http://service.archi.m1/HotelServiceIdentification/addRandomHotelResponse", fault = {
        @FaultAction(className = HotelAlreadyExistsException_Exception.class, value = "http://service.archi.m1/HotelServiceIdentification/addRandomHotel/Fault/HotelAlreadyExistsException")
    })
    public boolean addRandomHotel()
        throws HotelAlreadyExistsException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws HotelNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.DeleteHotel")
    @ResponseWrapper(localName = "deleteHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.hotel.DeleteHotelResponse")
    @Action(input = "http://service.archi.m1/HotelServiceIdentification/deleteHotelRequest", output = "http://service.archi.m1/HotelServiceIdentification/deleteHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundException_Exception.class, value = "http://service.archi.m1/HotelServiceIdentification/deleteHotel/Fault/HotelNotFoundException")
    })
    public boolean deleteHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundException_Exception
    ;

}
