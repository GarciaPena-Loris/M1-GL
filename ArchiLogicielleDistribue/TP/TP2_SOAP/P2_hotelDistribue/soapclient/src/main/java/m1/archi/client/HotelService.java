
package m1.archi.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "HotelService", targetNamespace = "http://service.archi.m1/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface HotelService {


    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "count", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.Count")
    @ResponseWrapper(localName = "countResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.CountResponse")
    @Action(input = "http://service.archi.m1/HotelService/countRequest", output = "http://service.archi.m1/HotelService/countResponse")
    public int count();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns m1.archi.client.Hotel
     * @throws HotelNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.UpdateHotel")
    @ResponseWrapper(localName = "updateHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.UpdateHotelResponse")
    @Action(input = "http://service.archi.m1/HotelService/updateHotelRequest", output = "http://service.archi.m1/HotelService/updateHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundException_Exception.class, value = "http://service.archi.m1/HotelService/updateHotel/Fault/HotelNotFoundException")
    })
    public Hotel updateHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Adresse arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws HotelNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws HotelNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.DeleteHotel")
    @ResponseWrapper(localName = "deleteHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.DeleteHotelResponse")
    @Action(input = "http://service.archi.m1/HotelService/deleteHotelRequest", output = "http://service.archi.m1/HotelService/deleteHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundException_Exception.class, value = "http://service.archi.m1/HotelService/deleteHotel/Fault/HotelNotFoundException")
    })
    public boolean deleteHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<m1.archi.client.Hotel>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getHotels", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.GetHotels")
    @ResponseWrapper(localName = "getHotelsResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.GetHotelsResponse")
    @Action(input = "http://service.archi.m1/HotelService/getHotelsRequest", output = "http://service.archi.m1/HotelService/getHotelsResponse")
    public List<Hotel> getHotels();

    /**
     * 
     * @param arg0
     * @return
     *     returns m1.archi.client.Hotel
     * @throws HotelNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.GetHotel")
    @ResponseWrapper(localName = "getHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.GetHotelResponse")
    @Action(input = "http://service.archi.m1/HotelService/getHotelRequest", output = "http://service.archi.m1/HotelService/getHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundException_Exception.class, value = "http://service.archi.m1/HotelService/getHotel/Fault/HotelNotFoundException")
    })
    public Hotel getHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns m1.archi.client.Hotel
     * @throws HotelAlreadyExistsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.AddHotel")
    @ResponseWrapper(localName = "addHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.client.AddHotelResponse")
    @Action(input = "http://service.archi.m1/HotelService/addHotelRequest", output = "http://service.archi.m1/HotelService/addHotelResponse", fault = {
        @FaultAction(className = HotelAlreadyExistsException_Exception.class, value = "http://service.archi.m1/HotelService/addHotel/Fault/HotelAlreadyExistsException")
    })
    public Hotel addHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Adresse arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws HotelAlreadyExistsException_Exception
    ;

}
